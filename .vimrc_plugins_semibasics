call plug#begin('~/.vim/plugged')

""" General
Plug 'editorconfig/editorconfig-vim'                                    " Editor config (http://editorconfig.org/)
Plug 'LunarWatcher/auto-pairs', { 'tag': '*' }                          " Auto-close brackets
Plug 'chriskempson/base16-vim'                                          " Base 16 Colorscheme
Plug '/opt/homebrew/opt/fzf' | Plug 'junegunn/fzf.vim'                  " Ubiquitous anf fast fuzzy finder
Plug '907th/vim-auto-save'                                              " Auto-save files
Plug 'kshenoy/vim-signature'                                            " Show marks on gutter
Plug 'tmux-plugins/vim-tmux-focus-events'                               " Fix FocusGained and FocusLost when using tmux (https://github.com/tmux-plugins/vim-tmux-focus-events)
Plug 'christoomey/vim-tmux-navigator'                                   " Tmux/Vim seamless navigation
Plug 'junegunn/goyo.vim'                                                " Distraction-free prose writting
Plug 'junegunn/limelight.vim'                                           " Highlight only the current paragraph
Plug 'will133/vim-dirdiff'                                              " Directory diff (life is more than git)

""" Coding support

" Navigation
Plug 'ludovicchabant/vim-gutentags'                                     " CTags auto-updater

" Git
Plug 'airblade/vim-gitgutter'                                           " Git: show changes on editor

" Linting & Formatting
Plug 'prettier/vim-prettier'                                            " Prettier

" Markup + CSS
Plug 'mattn/emmet-vim'                                                  " HTML with Emmet (formerly Zencoding)
Plug 'mxw/vim-jsx'                                                      " JSX syntax support
Plug 'hail2u/vim-css3-syntax'                                           " CSS3 syntax support
Plug 'cakebaker/scss-syntax.vim'                                        " SCSS syntax support
Plug 'alvan/vim-closetag'                                               " Auto-close X(HT)ML tags

" Syntaxes
Plug 'pangloss/vim-javascript'                                          " JavaScript syntax support
Plug 'herringtondarkholme/yats.vim', {'do': 'rm -rf UltiSnips'}         " TypeScript syntax support

" Auto-completion
Plug 'neoclide/coc.nvim', {'branch': 'release'}                                                      " Better auto-completion
Plug 'neoclide/coc-tsserver', {'do': 'yarn install --frozen-lockfile'}                               " TypeScript auto-completion
Plug 'pappasam/coc-jedi', { 'do': 'yarn install --frozen-lockfile && yarn build', 'branch': 'main' } " Python auto-completion
Plug 'neoclide/coc-snippets', {'do': 'yarn install --frozen-lockfile'}                               " Snippets auto-completion   

" Snippets
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'mlaursen/vim-react-snippets'

call plug#end()

"""""""""""""  PLUGIN CONFIGS

""" Emmet
let g:user_emmet_mode='n'
let g:user_emmet_leader_key='<Leader>,'

""" JSX
let g:jsx_ext_required=0

""" FZF (https://github.com/junegunn/fzf.vim#command-local-options)
let g:fzf_buffers_jump = 1

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" :Files override - Preview included
command! -bang -nargs=? -complete=dir Files
  \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

" :DirFiles - Files in current directory
command! -bang DirFiles
  \ call fzf#vim#files(expand('%:p:h'), fzf#vim#with_preview(), <bang>0)

" :Ag  - Start fzf with hidden preview window that can be enabled with "?" key
" :Ag! - Start fzf in fullscreen and display the preview window above
command! -bang -nargs=* Ag
  \ call fzf#vim#ag(<q-args>,
  \                 <bang>0 ? fzf#vim#with_preview('up:60%')
  \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
  \                 <bang>0)

" :Cd - Go to a dir, so Files will just list from it
command! -nargs=* -complete=dir Cd call fzf#run(fzf#wrap(
  \ {'source': 'find '.(empty(<q-args>) ? '.' : <q-args>).' -type d',
  \  'sink': 'cd'}))

" :Maps override - Show ALL types of vim maps (defaults to normal mode)
command! -bar -bang Maps call fzf#vim#maps('', <bang>0)

" UltiSnips
let g:UltiSnipsJumpForwardTrigger="<C-]>"
let g:UltiSnipsJumpBackwardTrigger="<C-[>"
let g:UltiSnipsEditSplit="vertical"

""" Auto-save
let g:auto_save = 1

""" Vim-gutter
let g:gitgutter_map_keys = 1

""" Guten Tags
let g:gutentags_enabled = 0
augroup auto_gutentags
  au FileType python,java,scala,json,yml,yaml,css,scss,less,xml,html,xhtml,svg,js,javascript,ts,typescript,vim let g:gutentags_enabled=1
augroup end

""" CoC
let g:coc_start_at_startup = 0

inoremap <silent><expr> <c-space> coc#refresh()

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
