call plug#begin('~/.vim/plugged')

" General
Plug 'editorconfig/editorconfig-vim'                     " Editor config (http://editorconfig.org/)
Plug 'LunarWatcher/auto-pairs', { 'tag': '*' }           " Auto-close brackets
Plug 'chriskempson/base16-vim'                           " Base 16 Colorscheme
Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim'      " Ubiquitous anf fast fuzzy finder

Plug '907th/vim-auto-save'                               " Auto-save files
Plug 'ludovicchabant/vim-gutentags'                      " CTags auto-updater
Plug 'airblade/vim-gitgutter'                            " Git: show changes on editor
Plug 'kshenoy/vim-signature'                             " Show marks on gutter
Plug 'tmux-plugins/vim-tmux-focus-events'                " Fix FocusGained and FocusLost when using tmux (https://github.com/tmux-plugins/vim-tmux-focus-events)
Plug 'christoomey/vim-tmux-navigator'                    " Tmux/Vim seamless navigation
Plug 'junegunn/goyo.vim'                                 " Distraction-free prose writting
Plug 'junegunn/limelight.vim'                            " Highlight only the current paragraph
Plug 'will133/vim-dirdiff'                               " Directory diff (life is more than git)

" Language support
Plug 'mattn/emmet-vim'                                   " HTML with Emmet (formerly Zencoding)
Plug 'mxw/vim-jsx'                                       " JSX syntax support
Plug 'pangloss/vim-javascript'                           " JS syntax support
Plug 'herringtondarkholme/yats.vim'                      " TypeScript
Plug 'dense-analysis/ale'                                " Linter/Fixer
Plug 'prettier/vim-prettier'                             " Prettier

" Snippets
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'epilande/vim-react-snippets'

call plug#end()

"""""""""""""  PLUGIN CONFIGS

""" Emmet
let g:user_emmet_mode='n'
let g:user_emmet_leader_key='<Leader>,'

""" JSX
let g:jsx_ext_required=0

""" FZF (https://github.com/junegunn/fzf.vim#command-local-options)
let g:fzf_buffers_jump = 1

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" :Files override - Preview included
command! -bang -nargs=? -complete=dir Files
  \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

" :DirFiles - Files in current directory
command! -bang DirFiles
  \ call fzf#vim#files(expand('%:p:h'), fzf#vim#with_preview(), <bang>0)

" :Ag  - Start fzf with hidden preview window that can be enabled with "?" key
" :Ag! - Start fzf in fullscreen and display the preview window above
command! -bang -nargs=* Ag
  \ call fzf#vim#ag(<q-args>,
  \                 <bang>0 ? fzf#vim#with_preview('up:60%')
  \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
  \                 <bang>0)

" :Cd - Go to a dir, so Files will just list from it
command! -nargs=* -complete=dir Cd call fzf#run(fzf#wrap(
  \ {'source': 'find '.(empty(<q-args>) ? '.' : <q-args>).' -type d',
  \  'sink': 'cd'}))

" ALE Linter/Fixer
let g:ale_set_balloons = 1
let g:ale_completion_enabled = 1
let g:ale_completion_autoimport = 1
let g:ale_linters = {
\   'javascript': ['eslint'],
\   'typescript': ['eslint', 'tsserver'],
\}
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'javascript': ['prettier'],
\   'typescript': ['prettier'],
\}
let g:ale_lint_on_text_changed = 0
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_enter = 0
let g:ale_lint_on_save = 0
let g:ale_lint_on_filetype_changed = 0
let g:ale_fix_on_save = 0

" UltiSnips
let g:UltiSnipsJumpForwardTrigger="<C-]>"
let g:UltiSnipsJumpBackwardTrigger="<C-[>"
let g:UltiSnipsEditSplit="vertical"

""" Auto-save
let g:auto_save = 1

""" Vim-gutter
let g:gitgutter_map_keys = 1

