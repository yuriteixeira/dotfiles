# Dotfiles
alias dot='git --git-dir=$HOME/.dotfiles.git/ --work-tree=$HOME'
alias pdot='git --git-dir=$HOME/.private.dotfiles.git/ --work-tree=$HOME'

# Common commands improvement
alias a="alias"
alias pa="ps aux"
alias e=$EDITOR
alias ip='ifconfig | grep "inet " | grep -v 127.0.0.1 | grep -v 169 | cut -d\  -f2'
alias m="more"

# Open profile with editor
alias pf="nvim -p \
~/.zshrc \
~/.config/nvim/init.vim \
~/.tmux.conf \
"

alias rpf="source ~/.zshrc"

# Hosts
alias hosts="sudo $EDITOR /etc/hosts"

# Important directories (aliases and working directories)
alias p="cd $PROJECTS_HOME"

### Package managers

# Brew
alias b=brew
alias bc=brew --cask

# NodeJS / Yarn
alias y='yarn'
alias yg='yarn global'
alias ys='yarn start'
alias yt='yarn test'
alias yl='yarn lint'
alias yco='yarn commit'
alias yb='yarn build'
alias yc='yarn clean'

# Python / Pip
alias pip2deps='python2 -m pipdeptree | grep -v "\s -"'
alias pip3deps='python3 -m pipdeptree | grep -v "\s -"'

alias pip2upgrade='pip2 freeze | cut -d = -f 1 | xargs -n1 pip2 install -U'
alias pip3upgrade='pip3 freeze | cut -d = -f 1 | xargs -n1 pip3 install -U'


### Docker, Kubernetes and Google Cloud Platform
alias d=docker
alias di='docker images'
alias dc="docker-compose"
alias k="kubectl"
alias gc="gcloud"

function drl {
    registry=$1
    image=$2
    curl -L http://${registry}/${image}/tags/list | jq
}

function docker-api {
  docker kill socat
  docker rm socat
  docker run -d -v /var/run/docker.sock:/var/run/docker.sock --name socat -p 127.0.0.1:2375:2375 bobrik/socat TCP-LISTEN:2375,fork UNIX-CONNECT:/var/run/docker.sock && export DOCKER_HOST=tcp://localhost:2375
  curl localhost:2375/images/json | jq .
  echo ">>> If a list of images appeared above, it worked."
}

### Tooling upgrade
function upgrade {
  echo ""
  echo ">>> Dot files"
  dot pull --rebase
  dot push

  echo ""
  echo ">>> Brew / Brew Cask"
  brew update
  brew upgrade
  brew outdated --cask | xargs -n1 brew reinstall --cask
  brew cleanup

  echo ""
  echo ">>> Yarn (Global)"
  yarn global upgrade

  echo ""
  echo ">>> Tmux Plugins"
  ~/.tmux/plugins/tpm/bin/update_plugins all

  echo ""
  echo ">>> Docker cleanup"
  docker system prune -f

  echo ""
  echo ">>> Google Cloud CLI"
  yes | gcloud components update

  echo ""
  echo ">>> Other updates"
  git -C ~/.config/base16-fzf pull
  git -C ~/.config/base16-shell pull

  echo ""
  echo "Oh-my-zsh"
  omz update
}

# FZF

# Touch + Creates dir path (if needed)
function to {
  [ -z "$1" ] && echo "ERROR: Path, pls..." && return 1
  local filepath=$1
  local dirpath=$(dirname $filepath)
  [ ! -d "$dirpath" ] && mkdir -p $dirpath
  touch $filepath
  echo ">>> File $filepath created!"
}

# Search + Edit (ag/fzf/e)
function age {
    CHOICE=$(ag --color $* | fzf -0 -1 --ansi)

    if [ -n "$CHOICE" ]
    then
        e -p $(echo "$CHOICE" | awk 'BEGIN { FS=":" } { printf "+%d %s\n", $2, $1 } ') 
    fi
}

# Search + Execute (ag/fzf)
function agx {
    CHOICE=$(ag --color $* | fzf -0 -1 --ansi)

    if [ -n "$CHOICE" ]
    then
        echo $CHOICE | cut -d ":" -f 1
    fi
}

# Watch (time based, not file change based)
function watch {
    time=$1
    shift

		while :; 
		do 
				clear
				date
				$@
				sleep $time
		done
}

# Watch file system changes
alias fw="fswatch -r -o -t -x -l 2"

# SourceTree
alias s="stree ."

# Notifications (OSX)
function notify {
    osascript -e "display notification \"${1}\" with title \"$([[ ! -z ${2} ]] && echo ${2} || echo "ATTENTION")\""
}

# Watch dir and exec command
function watch-n-do {
    [ -z "$1" ] || [ -z "$2" ] && echo "Usage: watch-n-do <path> <command>" && return 1

    echo ">>> Waiting for changes"
    echo "Path: $1"
    echo "Command: $2"
    echo ""

    bash -c $2

    fw $1 | while read; do bash -c $2; done
}

# Watch files and reload browser with fswatch and osacript
function livereload {
    local pathToWatch=${1:-"$PWD"}
    local browser=${2:-"Google Chrome"}
    echo ">>> Watching changes on $pathToWatch (will reload first tab on $browser) \n"
    fswatch -o $pathToWatch | xargs -n1 -I {} osascript -e "tell application \"$browser\" to tell the active tab of its first window to reload"
}

# Google Chrome for remote control (Chrome Dev Tools Protocol)
alias gcdt='/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --user-data-dir=/tmp/google_chrome_dev_tools_profile --remote-debugging-port=9222 http://localhost:9222 &'

# Chromium bundled with puppeteer for remote control (Chrome Dev Tools Protocol)
alias cmdt='node_modules/puppeteer/.local-chromium/mac-575458/chrome-mac/Chromium.app/Contents/MacOS/Chromium
--user-data-dir=/tmp/chromium_dev_tools_profile --remote-debugging-port=9222 http://localhost:9222 &'

# Convert CLDC from PC to Mac
# https://github.com/rscustom/rocksmith-custom-song-toolkit/wiki/Batch-Convert-CDLC-for-macOS
function rsconvert {
	echo ">>> Starting CLDC conversion..."
  songsFolder=~/Downloads
  rocksmithToolkitLocation=/Applications/RocksmithCustomSongToolkit.app
  appId=248750 # Cherub Rock - https://github.com/rscustom/rocksmith-custom-song-toolkit/blob/master/RocksmithToolkitLib/RocksmithToolkitLib.SongAppId.xml
  monoPath=$(which mono32)

  # Delete already existing mac songs from download folder which do not work
  find $songsFolder -name "*_m.psarc" -exec rm {} \;

  # Convert the songs from pc to mac format in same folder
  find $songsFolder -name "*_p.psarc" -exec $monoPath $rocksmithToolkitLocation/Contents/Resources/cdlcconverter.exe --sp Pc --tp Mac --appid $appId -i {} \;

  # Move to CLDC folder
  find $songsFolder -name "*_m.psarc" -exec mv {} $HOME/Library/Application\ Support/Steam/steamapps/common/Rocksmith2014/dlc \;

	echo ">>> DONE!"
}

# JENV Activation
eval "$(jenv init -)"

# Facebook FPP
alias x='fpp'
